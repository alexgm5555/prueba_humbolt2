{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/src/components/Mapa.js\";\nimport { connect } from 'react-redux';\nimport React, { createRef, Component } from 'react';\nimport { Circle, CircleMarker, Map, Marker, Polygon, Popup, Rectangle, TileLayer, Tooltip } from 'react-leaflet';\nvar center = [4.620943145474099, -74.07446100531007];\nvar multiPolygon = [[[51.51, -0.12], [51.51, -0.13], [51.53, -0.13]], [[51.51, -0.05], [51.51, -0.07], [51.53, -0.07]]];\nvar rectangle = [[51.49, -0.08], [51.5, -0.06]];\nexport var Mapa =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Mapa, _Component);\n\n  function Mapa(props) {\n    var _this;\n\n    _classCallCheck(this, Mapa);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mapa).call(this, props));\n\n    _this.onClickCircle = function () {\n      _this.setState({\n        clicked: _this.state.clicked + 1\n      });\n    };\n\n    _this.handleClick = function (e) {\n      console.log(e); // const map = this.mapRef.current\n      // if (map != null) {\n      //     map.leafletElement.locate()\n      // }\n    };\n\n    _this.toggleDraggable = function () {\n      _this.setState({\n        draggable: !_this.state.draggable\n      });\n    };\n\n    _this.updatePosition = function () {\n      var marker = _this.refmarker.current;\n\n      if (marker != null) {\n        _this.setState({\n          marker: marker.leafletElement.getLatLng()\n        });\n      }\n    };\n\n    _this.state = {\n      hasLocation: false,\n      latlng: {\n        lat: 4.650010884129616,\n        lng: -74.10284221172334\n      },\n      clicked: 0,\n      draggable: true\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.handleLocationFound = _this.handleLocationFound.bind(_assertThisInitialized(_this));\n    _this.toggleDraggable = _this.toggleDraggable.bind(_assertThisInitialized(_this));\n    _this.updatePosition = _this.updatePosition.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Mapa, [{\n    key: \"handleLocationFound\",\n    value: function handleLocationFound(e) {\n      console.log(e + \"handleLocationFound\");\n      this.setState({\n        hasLocation: true,\n        latlng: e.latlng\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var clickedText = this.state.clicked === 0 ? 'Click this Circle to change the Tooltip text' : \"Circle click: \".concat(this.state.clicked);\n      var marker = this.state.hasLocation ? React.createElement(Marker, {\n        position: this.state.latlng,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"You are here\")) : null;\n      var marketList = this.props.coordenates.list.map(function (marker, key) {\n        var lat = _this2.props.coordenates.list[key].lat;\n        var lngbd = parseFloat(_this2.props.coordenates.list[0].lng).toFixed(3);\n        var lng = '-74.07072';\n        console.log('lati-long-lngBD');\n        console.log(lat);\n        console.log(lng);\n        console.log(lngbd);\n        console.log(typeof lng + '---' + typeof lngbd);\n        return (// <Marker position={[4.620943145474099, -74.10284221172334>\n          React.createElement(Marker, {\n            position: [lat, lng],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, React.createElement(Popup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, \"You are ajsjahse\"))\n        );\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Map, {\n        center: center,\n        zoom: 14,\n        onClick: this.handleClick,\n        draggable: this.state.draggable,\n        onDragend: this.updatePosition,\n        onLocationfound: this.handleLocationFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(TileLayer, {\n        attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), marketList, React.createElement(Circle, {\n        center: center,\n        fillColor: \"blue\",\n        onClick: this.onClickCircle,\n        radius: 200,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, clickedText)), React.createElement(CircleMarker, {\n        center: [51.51, -0.12],\n        color: \"red\",\n        radius: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Tooltip for CircleMarker\")), React.createElement(Marker, {\n        position: this.state.latlng,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Popup for Marker\"), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Tooltip for Marker\")), marketList, React.createElement(Polygon, {\n        color: \"purple\",\n        positions: multiPolygon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        sticky: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"sticky Tooltip for Polygon\")), React.createElement(Rectangle, {\n        bounds: rectangle,\n        color: \"black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        direction: \"bottom\",\n        offset: [0, 20],\n        opacity: 1,\n        permanent: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"permanent Tooltip for Rectangle\"))));\n    }\n  }]);\n\n  return Mapa;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    coordenates: state.coordenates\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Mapa);","map":{"version":3,"sources":["/Users/mac/Documents/node/react/react-web/example-create-react-app-express/client/src/components/Mapa.js"],"names":["connect","React","createRef","Component","Circle","CircleMarker","Map","Marker","Polygon","Popup","Rectangle","TileLayer","Tooltip","center","multiPolygon","rectangle","Mapa","props","onClickCircle","setState","clicked","state","handleClick","e","console","log","toggleDraggable","draggable","updatePosition","marker","refmarker","current","leafletElement","getLatLng","hasLocation","latlng","lat","lng","bind","handleLocationFound","clickedText","marketList","coordenates","list","map","key","lngbd","parseFloat","toFixed","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["\nimport { connect } from 'react-redux'\nimport React, { createRef, Component } from 'react'\nimport {\n    Circle,\n    CircleMarker,\n    Map,\n    Marker,\n    Polygon,\n    Popup,\n    Rectangle,\n    TileLayer,\n    Tooltip,\n} from 'react-leaflet'\nconst center = [4.620943145474099, -74.07446100531007]\n\nconst multiPolygon = [\n    [[51.51, -0.12], [51.51, -0.13], [51.53, -0.13]],\n    [[51.51, -0.05], [51.51, -0.07], [51.53, -0.07]],\n]\n\nconst rectangle = [[51.49, -0.08], [51.5, -0.06]]\n\nexport class Mapa extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hasLocation: false,\n            latlng: {\n                lat: 4.650010884129616,\n                lng: -74.10284221172334,\n            },\n            clicked: 0,\n            draggable: true,\n        }\n        this.handleClick = this.handleClick.bind(this);\n\n        this.handleLocationFound = this.handleLocationFound.bind(this);\n        this.toggleDraggable = this.toggleDraggable.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n\n    }\n    onClickCircle = () => {\n        this.setState({ clicked: this.state.clicked + 1 })\n    }\n\n    handleClick = (e) => {\n        console.log(e)\n        // const map = this.mapRef.current\n        // if (map != null) {\n        //     map.leafletElement.locate()\n        // }\n    }\n\n    handleLocationFound(e) {\n\n        console.log(e + \"handleLocationFound\")\n        this.setState({\n            hasLocation: true,\n            latlng: e.latlng,\n        })\n    }\n    componentDidMount() {\n        console.log(this)\n    }\n    toggleDraggable = () => {\n        this.setState({ draggable: !this.state.draggable })\n      }\n    \n      updatePosition = () => {\n        const marker = this.refmarker.current\n        if (marker != null) {\n          this.setState({\n            marker: marker.leafletElement.getLatLng(),\n          })\n        }\n      }\n    render() {\n        \n        const clickedText =\n            this.state.clicked === 0\n                ? 'Click this Circle to change the Tooltip text'\n                : `Circle click: ${this.state.clicked}`\n        const marker = this.state.hasLocation ? (\n            <Marker position={this.state.latlng}>\n                <Popup>You are here</Popup>\n            </Marker>\n        ) : null\n        const marketList = this.props.coordenates.list.map((marker, key) => {\n            const lat = this.props.coordenates.list[key].lat\n            const lngbd = parseFloat(this.props.coordenates.list[0].lng).toFixed(3)\n            let lng = '-74.07072'  \n            console.log('lati-long-lngBD')\n            console.log(lat)\n            console.log(lng)\n            console.log(lngbd)\n            console.log(typeof lng+'---'+typeof lngbd)\n            return (\n\n                // <Marker position={[4.620943145474099, -74.10284221172334>\n                <Marker position={[lat, lng]}>\n                    <Popup>You are ajsjahse</Popup>\n                </Marker>\n            )\n        })\n        return (\n            <div >\n                <Map center={center} zoom={14}\n                    onClick={this.handleClick}\n\n          draggable={this.state.draggable}\n          onDragend={this.updatePosition}\n                    onLocationfound={this.handleLocationFound}>\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {marketList}\n                    <Circle\n                        center={center}\n                        fillColor=\"blue\"\n                        onClick={this.onClickCircle}\n                        radius={200}>\n                        <Tooltip>{clickedText}</Tooltip>\n                    </Circle>\n                    <CircleMarker center={[51.51, -0.12]} color=\"red\" radius={20}>\n                        <Tooltip>Tooltip for CircleMarker</Tooltip>\n                    </CircleMarker>\n                    <Marker position={this.state.latlng}>\n                        <Popup>Popup for Marker</Popup>\n                        <Tooltip>Tooltip for Marker</Tooltip>\n                    </Marker>\n                    {marketList}\n                    <Polygon color=\"purple\" positions={multiPolygon}>\n                        <Tooltip sticky>sticky Tooltip for Polygon</Tooltip>\n                    </Polygon>\n                    <Rectangle bounds={rectangle} color=\"black\">\n                        <Tooltip direction=\"bottom\" offset={[0, 20]} opacity={1} permanent>\n                            permanent Tooltip for Rectangle\n                        </Tooltip>\n                    </Rectangle>\n                </Map>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    coordenates: state.coordenates\n})\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Mapa)\n"]},"metadata":{},"sourceType":"module"}